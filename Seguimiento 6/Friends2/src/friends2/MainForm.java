/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package friends2;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.NumberFormatException;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jname = new javax.swing.JLabel();
        jnumber = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtNumber = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jname.setText("Name:");

        jnumber.setText("Number:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRead.setText("Read");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jname, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addComponent(jnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnRead)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(txtNumber)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jname)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jnumber)
                    .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnRead)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
        String newName = txtName.getText().trim();
        String numberText = txtNumber.getText().trim();

        if (newName.isEmpty() || numberText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        long newNumber;
        try {
            newNumber = Long.parseLong(numberText);
        } catch (NumberFormatException nef) {
            JOptionPane.showMessageDialog(null, "El numero ingresado no es valido.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File file = new File("friendsContact.txt");
        if (!file.exists()) {
            file.createNewFile();
        }

        boolean contactExists = doesContactExist(file, newName, newNumber);

        if (!contactExists) {
            addContact(file, newName, newNumber);
            JOptionPane.showMessageDialog(null, "El contacto fue creado", 
                "Informacion", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "El contacto ya existe.", 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (IOException ioe) {
        JOptionPane.showMessageDialog(null, "Ocurrio un error al acceder al archivo.", 
            "Error", JOptionPane.ERROR_MESSAGE);
        ioe.printStackTrace();
    }
}

private boolean doesContactExist(File file, String name, long number) throws IOException {
    try (RandomAccessFile raf = new RandomAccessFile(file, "r")) {
        String nameNumberString;
        while (raf.getFilePointer() < raf.length()) {
            nameNumberString = raf.readLine();
            String[] lineSplit = nameNumberString.split("!");
            String existingName = lineSplit[0];
            long existingNumber = Long.parseLong(lineSplit[1]);

            if (existingName.equals(name) && existingNumber == number) {
                return true;
            }
        }
    }
    return false;
}

private void addContact(File file, String name, long number) throws IOException {
    try (RandomAccessFile raf = new RandomAccessFile(file, "rw")) {
        raf.seek(file.length());
        String nameNumberString = name + "!" + number;
        raf.writeBytes(nameNumberString);
        raf.writeBytes(System.lineSeparator());
    }
    }//GEN-LAST:event_btnCreateActionPerformed

    private long lastReadPosition = 0;
    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadActionPerformed
        try {
        String newName = txtName.getText().trim();
        
        if (newName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un nombre.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File file = new File("friendsContact.txt");

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "El archivo no existe", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (RandomAccessFile raf = new RandomAccessFile(file, "rw")) {
            boolean found = false;
            raf.seek(lastReadPosition);

            while (raf.getFilePointer() < raf.length()) {
                String nameNumberString = raf.readLine();
                String[] lineSplit = nameNumberString.split("!");
                String name = lineSplit[0];
                long number = Long.parseLong(lineSplit[1]);

                if (name.equals(newName)) {
                    found = true;
                    txtNumber.setText(String.valueOf(number));
                    lastReadPosition = raf.getFilePointer();
                    break;
                }
            }

            if (!found) {
                lastReadPosition = 0;
                JOptionPane.showMessageDialog(null, "Contacto no encontrado.", 
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (IOException ioe) {
        JOptionPane.showMessageDialog(null, "Error al leer el archivo.", 
            "Error", JOptionPane.ERROR_MESSAGE);
        ioe.printStackTrace();
    } catch (NumberFormatException nef) {
        JOptionPane.showMessageDialog(null, "Error al procesar el numero.", 
            "Error", JOptionPane.ERROR_MESSAGE);
        nef.printStackTrace();
    }
    }//GEN-LAST:event_btnReadActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
        String nametoUpdate = txtName.getText().trim();
        String numberText = txtNumber.getText().trim();

        if (nametoUpdate.isEmpty() || numberText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        long numbertoUpdate;
        try {
            numbertoUpdate = Long.parseLong(numberText);
        } catch (NumberFormatException nef) {
            JOptionPane.showMessageDialog(null, "El numero ingresado no es valido.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File file = new File("friendsContact.txt");

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "El archivo no existe.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        boolean found = false;

        // Búsqueda del contacto a actualizar
        while (raf.getFilePointer() < raf.length()) {
            String nameNumberString = raf.readLine();
            String[] lineSplit = nameNumberString.split("!");
            String name = lineSplit[0];
            long number = Long.parseLong(lineSplit[1]);

            if (name.equals(nametoUpdate)) {
                found = true;
                break;
            }
        }

        if (found) {
            File tmpFile = new File("temp.txt");
            RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");
            raf.seek(0);
            boolean updated = false;

            while (raf.getFilePointer() < raf.length()) {
                String nameNumberString = raf.readLine();
                int index = nameNumberString.indexOf('!');
                String name = nameNumberString.substring(0, index);

                if (name.equals(nametoUpdate) && !updated) {
                    nameNumberString = name + "!" + String.valueOf(numbertoUpdate);
                    updated = true;
                }

                tmpraf.writeBytes(nameNumberString);
                tmpraf.writeBytes(System.lineSeparator());
            }

            // Copiar desde temp.txt a friendsContact.txt
            raf.seek(0);
            tmpraf.seek(0);

            while (tmpraf.getFilePointer() < tmpraf.length()) {
                raf.writeBytes(tmpraf.readLine());
                raf.writeBytes(System.lineSeparator());
            }

            raf.setLength(tmpraf.length());
            tmpraf.close();
            raf.close();
            tmpFile.delete();

            // Reiniciar el puntero de lectura
            lastReadPosition = 0;

            JOptionPane.showMessageDialog(null, "El contacto fue actualizado", 
                "Informacion", JOptionPane.INFORMATION_MESSAGE);
        } else {
            raf.close();
            JOptionPane.showMessageDialog(null, "El contacto no existe.", 
                "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (IOException ioe) {
        System.out.println(ioe);
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
        String newName = txtName.getText().trim();

        if (newName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un nombre.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File file = new File("friendsContact.txt");

        if (!file.exists()) {
            JOptionPane.showMessageDialog(null, "El archivo no existe.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        boolean found = false;

        while (raf.getFilePointer() < raf.length()) {
            String nameNumberString = raf.readLine();
            String[] lineSplit = nameNumberString.split("!");
            String name = lineSplit[0];

            if (name.equals(newName)) {
                found = true;
                break;
            }
        }

        if (found) {
            File tmpFile = new File("temp.txt");
            RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");
            raf.seek(0);
            boolean deleted = false;

            while (raf.getFilePointer() < raf.length()) {
                String nameNumberString = raf.readLine();
                String[] lineSplit = nameNumberString.split("!");
                String name = lineSplit[0];

                if (name.equals(newName) && !deleted) {
                    deleted = true;
                    continue;
                }

                tmpraf.writeBytes(nameNumberString);
                tmpraf.writeBytes(System.lineSeparator());
            }

            raf.seek(0);
            tmpraf.seek(0);

            while (tmpraf.getFilePointer() < tmpraf.length()) {
                raf.writeBytes(tmpraf.readLine());
                raf.writeBytes(System.lineSeparator());
            }

            raf.setLength(tmpraf.length());
            tmpraf.close();
            raf.close();
            tmpFile.delete();

            JOptionPane.showMessageDialog(null, "Contacto eliminado", 
                "Informacion", JOptionPane.INFORMATION_MESSAGE);
        } else {
            raf.close();
            JOptionPane.showMessageDialog(null, "El contacto no existe", 
                "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (IOException ioe) {
        System.out.println(ioe);
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtName.setText("");
        txtNumber.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jname;
    private javax.swing.JLabel jnumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNumber;
    // End of variables declaration//GEN-END:variables
}
